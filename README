一套暂时用于移动游戏端(android,ios,Linux,Mac等类Unix系统)的文件系统(windows平台暂时不提供支持，后面再重构)
针对游戏的特点
读操作非常频繁，写操作很少，文件修改基本在启动的时候

主要参考了git的文件系统 
    通过sha1值去做文件映射 40个字符的摘要信息 前面2个作为包名 后面38个作为文件名称 因为SHA1的碰撞概率极低，再加上在这里SHA1做的不是数据校验而是
    唯一值，还可以加上文件大小比对，可放心使用（大概2的53次方的文件数目才会产生碰撞几率，比地球的沙子数目还要多)
    把文件操作记录写入log的方式记下来 防止游戏崩溃出错导致文件丢失 也可以做delay处理 以及一些重复和反复操作的优化
    对于文件的add remove update(对于游戏热更,这些足够了，而且游戏的热更往往放在刚启动的时候，不需要很强的实时性)
    对于实时性操作一些临时文件，那么不需要用这个文件系统，用引擎自带的即可
淘宝TFS
    一个block分成info和data 2个文件
zip文件格式
    主要用encode和decode这一块


前面2个作为包名 所以文件数不会超过256个block 基本上现有的系统都支持打开这么多个IO
因为文件映射信息要加载到内存中 这一块内存能省则省

info中
内存中的文件描述信息

删除标识位 一个bit 另外3个bit可用于其他标志位 暂不使用
压缩等级 0-9 其实就是占用 4bit
文件原始大小 uint32 32bit
文件压缩后大小 uint32 32bit
文件偏移值   unint32 32bit
SHA1值   因为[0-9][a-f]只有16种可能 所以一个编码值占用4bit 那么38个占用 19byte 先不做优化那么是38byte
一共需要 （4 + 4 + 32 + 32 + 32 + 172）/8 = 32byte
不优化的话是51byte

如果采用unorderer_map key会占用38B value占用51+46B 大概一个条目增加135B
对于100k个文件 大致会占用12M内存(基本上游戏资源文件数目达到10W量级已经很可观了，大致满足需求)